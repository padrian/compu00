include /etc/nginx/snippets/blockuseragents.rules;

server {

	listen 80 default_server;
	server_name _;
	#return 301 https://$server_name$request_uri;	

}

server {

	listen 443 ssl http2;
	server_name _;
	resolver {{ resolver }};
	root /var/www/{{ domain }};

	ssl_protocols TLSv1.2;
	ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
	ssl_prefer_server_ciphers On;
	ssl_session_cache shared:SSL:128m;
	
#	ssl_trusted_certificate /etc/letsencrypt/live/{{ domain }}/chain.pem;
#    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
#    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;

	ssl_stapling on;
	ssl_stapling_verify on;

	add_header Strict-Transport-Security "max-age=31557600; includeSubDomains";
	add_header X-Content-Type-Options "nosniff" always;
	add_header X-Frame-Options "SAMEORIGIN" always;
	add_header X-Xss-Protection "1";
	#add_header Content-Security-Policy "default-src 'self'";
	add_header Referrer-Policy "no-referrer";
	

	if ($blockedagent) {
		return 403;
	}


	location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

	location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Very rarely should these ever be accessed outside of your lan

	location ~* \.(txt|log)$ {
        allow 127.0.0.1;
        deny all;
    }

	location ~ \..*/.*\.php$ {
        return 403;
	}

	location ~ ^/sites/.*/private/ {
        return 403;
    }

   	# Block access to "hidden" files and directories whose names begin with a
	# period. This includes directories used by version control systems such
    # as Subversion or Git to store control files.

    location ~ (^|/)\. {
        return 403;
    }

    location / {
        try_files $uri /index.php?$query_string; # For Drupal >= 7
    }


   	location @rewrite {
        rewrite ^/(.*)$ /index.php?q=$1;
    }

    # In Drupal 8, we must also match new paths where the '.php' appears in the middle,
    # such as update.php/selection. The rule we use is strict, and only allows this pattern
    # with the update.php front controller.  This allows legacy path aliases in the form of
    # blog/index.php/legacy-path to continue to route to Drupal nodes. If you do not have
   	# any paths like that, then you might prefer to use a laxer rule, such as:
   	#   location ~ \.php(/|$) {
    # The laxer rule will continue to work if Drupal uses this new URL pattern with front
    # controllers other than update.php in a future release.

    location ~ '\.php$|^/update.php' {
        fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
        include fastcgi_params;
        include snippets/fastcgi-php.conf;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_intercept_errors on;
        fastcgi_pass unix:/run/php/php7.0-fpm.sock;
    }



    # Fighting with Styles? This little gem is amazing.
    location ~ ^/sites/.*/files/styles/ { # For Drpal >= 7
        try_files $uri @rewrite;
    }


    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }


  	location ~* (\.jpg|\.png|\.gif|\.jpeg|\.png)$ {
		valid_referers none blocked {{ domain }};
		if ($invalid_referer) {
			return 403;
	 	}
   	}


}

